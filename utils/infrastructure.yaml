---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Public Amazon EKS Cluster with NodeGroup and SSH access'

Parameters:

  VpcBlock:
    Type: String
    Default: 192.168.0.0/16
    Description: The CIDR range for the VPC. This should be a valid private (RFC 1918) CIDR range.

  Subnet01Block:
    Type: String
    Default: 192.168.64.0/18
    Description: CidrBlock for subnet 01 within the VPC

  Subnet02Block:
    Type: String
    Default: 192.168.128.0/18
    Description: CidrBlock for subnet 02 within the VPC

  Subnet03Block:
    Type: String
    Default: 192.168.192.0/18
    Description: CidrBlock for subnet 03 within the VPC. This is used only if the region has more than 2 AZs.

  ClusterName:
    Description: The name of the EKS cluster
    Type: String
    Default: morova-eks-cluster

  EKSVersion:
    Description: The version of the EKS cluster
    Type: String
    Default: '1.21'
    AllowedValues:
      - '1.21'
      - '1.20'
      - '1.19'
      - '1.18'
      - '1.17'
      - '1.16'

  WorkerNodeInstanceType:
    Description: EC2 instance type for the primary node instances
    Type: String
    Default: t3.medium
    ConstraintDescription: Must be a valid EC2 instance type
    AllowedValues:
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.12xlarge
      - m5.24xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.18xlarge
      - i3.large
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.16xlarge
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - r4.large
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r4.16xlarge
      - x1.16xlarge
      - x1.32xlarge
      - p2.xlarge
      - p2.8xlarge
      - p2.16xlarge
      - p3.2xlarge
      - p3.8xlarge
      - p3.16xlarge
      - p3dn.24xlarge
      - r5.large
      - r5.xlarge
      - r5.2xlarge
      - r5.4xlarge
      - r5.12xlarge
      - r5.24xlarge
      - r5d.large
      - r5d.xlarge
      - r5d.2xlarge
      - r5d.4xlarge
      - r5d.12xlarge
      - r5d.24xlarge
      - z1d.large
      - z1d.xlarge
      - z1d.2xlarge
      - z1d.3xlarge
      - z1d.6xlarge
      - z1d.12xlarge

  WorkerNodeVolumeSize:
    Description: Node volume size
    Type: Number
    Default: 20

  WorkerNodeAutoScalingGroupMinSize:
    Description: Minimum size of Node Group ASG.
    Type: Number
    Default: 3
  WorkerNodeAutoScalingGroupDesiredCapacity:
    Description: Desired capacity of Node Group ASG.
    Type: Number
    Default: 5
  WorkerNodeAutoScalingGroupMaxSize:
    Description: >-
      Maximum size of Node Group ASG. Set to at least 1 greater than
      WorkerNodeAutoScalingGroupDesiredCapacity.
    Type: Number
    Default: 6

  WorkerNodeEc2SshKey:
    Description: SSH key name to allow secure remote access to your nodes
    Type: String
    Default: morova-eks-keypair

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Worker Network Configuration"
        Parameters:
          - VpcBlock
          - Subnet01Block
          - Subnet02Block
          - Subnet03Block
      - Label:
          default: "EKS Configuration"
        Parameters:
          - ClusterName
          - EKSVersion
      - Label:
          default: "Worker Node Configuration"
        Parameters:
          - WorkerNodeInstanceType
          - WorkerNodeVolumeSize
      - Label:
          default: "Worker Node Auto Scaling Group Configuration"
        Parameters:
          - WorkerNodeAutoScalingGroupMinSize
          - WorkerNodeAutoScalingGroupDesiredCapacity
          - WorkerNodeAutoScalingGroupMaxSize
        

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:  !Ref VpcBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-VPC'
      - Key: Cost Center
        Value: 'DDOS'

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-IGW'
        - Key: Cost Center
          Value: 'DDOS'

  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public Subnets
      - Key: Network
        Value: Public

  Route:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  Subnet01:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 01
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: Subnet01Block
      MapPublicIpOnLaunch: true
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-Subnet01"
      - Key: Cost Center
        Value: 'DDOS'

  Subnet02:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 02
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: Subnet02Block
      MapPublicIpOnLaunch: true
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-Subnet02"
      - Key: Cost Center
        Value: 'DDOS'

  Subnet03:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 03
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '2'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: Subnet03Block
      MapPublicIpOnLaunch: true
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-Subnet03"
      - Key: Cost Center
        Value: 'DDOS'

  Subnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet01
      RouteTableId: !Ref RouteTable

  Subnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet02
      RouteTableId: !Ref RouteTable

  Subnet03RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet03
      RouteTableId: !Ref RouteTable

  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cluster communication with worker nodes
      VpcId: !Ref VPC
  
  EKSClusterRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: 'morova-EKS-ClusterRole'
      Description: >-
        The Amazon Resource Name (ARN) of the IAM role that provides permissions
        for the Kubernetes control plane to make calls to AWS API operations on
        your behalf.
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonEKSClusterPolicy'
      Tags:
        - Key: Name
          Value: 'morova-EKS-ClusterRole'
        - Key: Cost Center
          Value: 'DDOS'
  
  EKSCluster:
    Type: 'AWS::EKS::Cluster'
    Properties:
      Name: !Ref ClusterName
      KubernetesNetworkConfig:
        ServiceIpv4Cidr: 172.16.0.0/12
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref ControlPlaneSecurityGroup
        SubnetIds:
          - !Ref Subnet01
          - !Ref Subnet02
          - !Ref Subnet03
      RoleArn: !GetAtt 
        - EKSClusterRole
        - Arn
      Version: !Ref EKSVersion

  WorkerNodeInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: 'morova-Worker-Node-Instance-Role'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy'
        - 'arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy'
        - 'arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly'
      Tags:
        - Key: Name
          Value: 'morova-Worker-Node-Instance-Role'
        - Key: Cost Center
          Value: 'DDOS'

  WorkerNodeInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: 'morova-Worker-Node-Instance-Profile'
      Path: /
      Roles:
        - !Ref WorkerNodeInstanceRole

  ClusterAutoScalerPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: ClusterAutoScalerPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'autoscaling:DescribeAutoScalingGroups'
              - 'autoscaling:DescribeAutoScalingInstances'
              - 'autoscaling:DescribeLaunchConfigurations'
              - 'autoscaling:DescribeTags'
              - 'autoscaling:SetDesiredCapacity'
              - 'autoscaling:TerminateInstanceInAutoScalingGroup'
              - 'ec2:DescribeLaunchTemplateVersions'
            Resource: '*'
      Roles:
        - !Ref WorkerNodeInstanceRole
  
  EKSNodegroup:
    Type: 'AWS::EKS::Nodegroup'
    Properties:
      ClusterName: !Ref EKSCluster
      #Do not add NodegroupName, CF can not update the stack in this case
      #NodegroupName: !Sub '${CustomerID}-EKSNodegroup-Workers'
      #Using Launch template we can assign a security group to the worker node instances
      #LaunchTemplate: 
      #Id: !Ref WorkerNodeLaunchTemplate
      InstanceTypes: 
        - !Ref WorkerNodeInstanceType
      DiskSize: !Ref WorkerNodeVolumeSize
      AmiType: AL2_x86_64
      CapacityType: ON_DEMAND
      NodeRole: !GetAtt WorkerNodeInstanceRole.Arn
      RemoteAccess: 
        Ec2SshKey: !Ref WorkerNodeEc2SshKey
      ScalingConfig:
        MinSize: !Ref WorkerNodeAutoScalingGroupMinSize
        DesiredSize: !Ref WorkerNodeAutoScalingGroupDesiredCapacity
        MaxSize: !Ref WorkerNodeAutoScalingGroupMaxSize
      UpdateConfig:
        MaxUnavailable: 1
      # Labels:
      #   rapidminer.customer: !Ref CustomerID
      #   nodegroup: !Ref CustomerID
      Subnets:
        - !Ref Subnet01
        - !Ref Subnet02
        - !Ref Subnet03
      Tags:
        Name: 'morova-EKSNodegroup-Workers'
        'Cost Center': 'DDOS'

Outputs:

  SubnetIds:
    Description: All subnets in the VPC
    Value: !Join [ ",", [ !Ref Subnet01, !Ref Subnet02, !Ref Subnet03 ] ]

  SecurityGroups:
    Description: Security group for the cluster control plane communication with worker nodes
    Value: !Join [ ",", [ !Ref ControlPlaneSecurityGroup ] ]

  VpcId:
    Description: The VPC Id
    Value: !Ref VPC

  EKSClusterName:
    Description: Name of EKS cluster
    Value: !Ref EKSCluster