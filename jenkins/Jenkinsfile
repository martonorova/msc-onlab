import groovy.json.JsonSlurper



def awsCliImage = "amazon/aws-cli"
def awsCFBaseCommand = "${awsCliImage} cloudformation"
def cloudformationStackArn = ""
// def cfStackStatusFilters = [
//     "CREATE_IN_PROGRESS",
//     "CREATE_FAILED",
//     "CREATE_COMPLETE",
//     "ROLLBACK_IN_PROGRESS",
//     "ROLLBACK_FAILED",
//     "ROLLBACK_COMPLETE",
//     "DELETE_IN_PROGRESS"
// ]
def cfStackStatusFilters = [
    "DELETE_COMPLETE"
]

def cfStackExists = null

pipeline { 
    agent any

    parameters {
        string(name: 'CFStackName', defaultValue: 'morova-eks-cluster', description: 'The name of the AWS CF stack to use / create')
        string(name: 'AWSRegion', defaultValue: 'us-east-2', description: 'The AWS region to use')
        booleanParam(name: 'DeploySUT', defaultValue: true, description: 'Set to TRUE to deploy the SUT')
        booleanParam(name: 'RunMeasurement', defaultValue: true, description: 'Set to TRUE to run the measurements against the SUT')
        booleanParam(name: 'CleanUpCFStack', defaultValue: true, description: 'Set to TRUE to delete the CloudFormation stack at the end of the pipeline')
    }

    options {
        skipStagesAfterUnstable()
        skipDefaultCheckout()
        timeout(time: 15, unit: 'MINUTES')
        timestamps()
    }



    // environment {
    //     // AWS_REGION="us-east-2"
    // }

    stages {
        stage('Prepare build') {
            steps {
                checkout scm
                // sh "source /var/jenkins_home/.bashrc"
            }
        }

        stage('INFR - check') {
            steps {
                echo "Setup AWS CLI"
                withCredentials(
                    [
                        usernamePassword(
                            credentialsId: 'aws-key',
                            usernameVariable: 'AWS_ACCESS_KEY_ID',
                            passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                        ),
                        string(
                            credentialsId: 'aws-session-token',
                            variable: 'AWS_SESSION_TOKEN'
                        )
                    ]
                ) {
                    script {
                        echo "Check if '$CFStackName' CloudFormation stack exists"
                        def stacksResult = sh(
                            script: "/usr/bin/docker run \
                                --env AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
                                --env AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
                                --env AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN \
                                ${awsCFBaseCommand} list-stacks --region $AWSRegion --stack-status-filter ${cfStackStatusFilters.join(' ')} | jq -r '.StackSummaries | map(select(.StackName == \"morova-eks-cluster\"))'",
                            returnStdout: true
                        ).trim()
                        def jsonSlurper = new JsonSlurper()
                        def stacksResultParsed = jsonSlurper.parseText(stacksResult)
                        println "Parsed result of stacks: ${stacksResultParsed}"

                        if (stacksResultParsed.size == 0) {
                            println "CloudFormation stack '${CFStackName}' does not exists"
                            cfStackExists = false
                        } else if (stacksResultParsed.size == 1) {
                            println "CloudFormation stack '${CFStackName}' already exists"
                            cfStackExists = true

                            def stack = stacksResultParsed[0]
                            switch(stack.StackStatus) {
                                case "CREATE_COMPLETE":
                                    println "CloudFormation stack is ready!"
                                default:
                                    error("CF stack named '${CFStackName}' with ARN '${stack.StackId}' has status '${stack.StackStatus}' - probably another job is working with it or check AWS Console")

                            }
                            //TODO check stack status, wait if CREATE_IN_PROGRESS, fail otherwise
                        } else {
                            error("Multiple CF stacks exist named '${CFStackName}' with status from  [${cfStackStatusFilters.join(', ')}]")
                        }


                        // echo "cfStackExists = ${cfStackExists}"

                        // if (!cfStackExists) {
                        //     echo "Creating CloudFormation stack"
                        // }
                    }
                }
                
            }
        }

        stage('Deployment') {
            steps {
                echo "Deployment"
            }
        }

        stage('Running tests') {
            steps {
                echo "Running tests"
            }
        }

        stage('Clean up') {
            steps {
                echo "Clean up"
            }
        }
    }
}