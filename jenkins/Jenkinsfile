import groovy.json.JsonSlurper

def sectionHeaderStyle = """
    text-align: center;
    font-size: 22px;
    font-weight: bold;
    padding: 4px;
"""

def createCfStack = null
def useEnhancements = false

pipeline { 
    agent any

    parameters {
        separator(name: 'CLEAN', sectionHeader: 'Clean', separatorStyle: 'border-width: 5', sectionHeaderStyle: sectionHeaderStyle)
        booleanParam(name: 'CleanEnhancements', defaultValue: false, description: 'Set to TRUE to delete enhancements at the end of the pipeline')
        booleanParam(name: 'DeleteCFStack', defaultValue: false, description: 'Set to TRUE to delete the CloudFormation stack at the end of the pipeline')
        booleanParam(name: 'CleanWorkSpace', defaultValue: true, description: 'Set to TRUE to delete workspace at the end of the pipeline')

        separator(name: 'INFRASTRUCTURE', sectionHeader: 'Infrastructure', separatorStyle: 'border-width: 5', sectionHeaderStyle: sectionHeaderStyle)
        string(name: 'CFStackName', defaultValue: 'morova-eks-cluster', description: 'The name of the AWS CF stack to use / create')
        string(name: 'EKSClusterName', defaultValue: 'morova-eks-cluster', description: 'The name of the AWS EKS cluster')
        string(name: 'AWSRegion', defaultValue: 'us-east-2', description: 'The AWS region to use')
        string(name: 'S3Bucket', defaultValue: 'morova-bucket', description: 'The name of the S3 bucket to store the CF template')
        booleanParam(name: 'DeployTools', defaultValue: true, description: 'Set to TRUE to deploy Grafana, Chaos Mesh, Prometheus, etc.')

        separator(name: 'ENHANCEMENTS', sectionHeader: 'Enhancements', separatorStyle: 'border-width: 5', sectionHeaderStyle: sectionHeaderStyle)
        booleanParam(name: 'UseKafka', defaultValue: false, description: 'Set to TRUE, to deploy Kafka and configure the app to use it')
        booleanParam(name: 'UseHPA', defaultValue: false, description: 'Set to TRUE, to deploy HPA with the application')
        booleanParam(name: 'UseKEDA', defaultValue: false, description: 'Set to TRUE, to deploy KEDA')

        separator(name: 'APPLICATION', sectionHeader: 'Application', separatorStyle: 'border-width: 5', sectionHeaderStyle: sectionHeaderStyle)
        booleanParam(name: 'DeployApp', defaultValue: true, description: 'Set to TRUE to deploy the application')
        
        separator(name: 'MEASUREMENT', sectionHeader: 'Measurement', separatorStyle: 'border-width: 5', sectionHeaderStyle: sectionHeaderStyle)
        booleanParam(name: 'RunMeasurement', defaultValue: true, description: 'Set to TRUE to run the measurements against the SUT')
        choice(name: 'MEASFaultProfile', choices: ['none', 'io', 'network-delay', 'network-partition', 'pod-failure', 'pod-kill', 'stress-cpu', 'stress-mem', 'custom'], description: 'Name of the fault profile')
        string(name: 'MEASMeasurementCount', defaultValue: '10', description: 'Number of measurements to make during the measurement sequence')
        string(name: 'MEASLoadDuration', defaultValue: '600', description: 'Duration of the load generation in a single measurement in SECONDS')
        choice(name: 'MEASClusterType', choices: ['eks', 'minikube'], description: 'Type of the K8s cluster the stack runs on')
        string(name: 'MEASLocustUserCount', defaultValue: '1', description: 'Total number of Locust users to start')
        string(name: 'MEASLocustSpawnRate', defaultValue: '1', description: 'Number of Locust users to spawn per second')
        string(name: 'MEASComment', defaultValue: '', description: 'Give a comment about the measurement sequence')
    }

    options {
        skipStagesAfterUnstable()
        skipDefaultCheckout()
        timeout(time: 6, unit: 'HOURS')
        timestamps()
    }

    environment {
        REGISTRY_PREFIX='morova'
        BACKEND_DOCKER_IMAGE_NAME='kubedepend-backend'
        WORKER_DOCKER_IMAGE_NAME='kubedepend-worker'
        KAFKA_DOCKER_IMAGE_NAME='kubedepend-kafka'
    }

    stages {
        stage('Prepare build') {
            steps {
                checkout scm
                sh "aws --version"

                script {
                    useEnhancements = UseKafka == 'true' || UseHPA == 'true' || UseKEDA == 'true'

                    env.DOCKER_TAG = env.BUILD_NUMBER
                    DOCKER_TAG = env.BUILD_NUMBER

                    echo "Setup aws config"
                    withCredentials(
                        [
                            usernamePassword(
                                credentialsId: 'aws-key',
                                usernameVariable: 'AWS_ACCESS_KEY_ID',
                                passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                            ),
                            string(
                                credentialsId: 'aws-session-token',
                                variable: 'AWS_SESSION_TOKEN'
                            )
                        ]
                    ) {
                        sh """
                            |aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                            |aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                            |#aws configure set aws_session_token $AWS_SESSION_TOKEN
                            |aws configure set default.region $AWSRegion
                            |aws configure set default.output json
                        """.stripMargin('|')
                    }
                    echo "Setup docker config"
                    withCredentials(
                        [
                            usernamePassword(
                                credentialsId: 'dockerhub-creds',
                                usernameVariable: 'DOCKER_USER',
                                passwordVariable: 'DOCKER_PASS'
                            )
                        ]
                    ) {
                        sh '''#!/bin/bash
                            export AUTH="$DOCKER_USER:$DOCKER_PASS" && \
                            mkdir -p $WORKSPACE/.docker && \
                            echo "{ \\"auths\\": { \\"https://index.docker.io/v1/\\": { \\"auth\\": \\"$(echo -n $AUTH|base64 -w 0)\\" }}}" > "$WORKSPACE/.docker/config.json"
                        '''
                    }
                }
            }
        }

        stage('INFR - check') {

            steps {
                echo "Check if CloudFormation stack exists"
                
                script {
                    try {

                        echo "Check if '$CFStackName' CloudFormation stack exists"
                        def stacksResult = sh(
                            script: "aws cloudformation describe-stacks --stack-name ${CFStackName} | jq -r '.Stacks'",
                            returnStdout: true
                        ).trim()
                        def jsonSlurper = new JsonSlurper()
                        def stacksResultParsed = jsonSlurper.parseText(stacksResult)
                        println "Parsed result of stacks: ${stacksResultParsed}"

                        def stack = stacksResultParsed[0]
                        switch(stack.StackStatus) {
                            case "CREATE_COMPLETE":
                                println "CloudFormation stack is ready!"
                            default:
                                error("CF stack named '${CFStackName}' with ARN '${stack.StackId}' has status '${stack.StackStatus}' - probably another job is working with it or check AWS Console")

                        }
                        createCfStack = false

                    } catch (Exception e) {
                        echo "CF stack named '${CFStackName}' does not exist, creating..."
                        println e
                        createCfStack = true
                    }
                    
                }
                
            }
        }

        stage('INFR - create') {
            when { expression { createCfStack } }

            steps {
                script {
                    // Uploading does not work, --body parameter parse error
                    // echo "Upload CF template to S3"
                    // def uploadResult = sh(
                    //     script: "aws s3api --debug put-object --bucket $S3Bucket --key eks/infrastructure.yaml --body ./utils/infrastructure.yaml",
                    //     returnStdout: true
                    // ).trim()
                    // println "uploadResult = ${uploadResult}"

                    echo "Create CloudFormation stack"
                    def stackId = sh(
                        script: "aws cloudformation create-stack --stack-name $CFStackName --template-url https://morova-bucket.s3.us-east-2.amazonaws.com/eks/infrastructure.yaml --parameters ParameterKey=ClusterName,ParameterValue=$EKSClusterName --capabilities CAPABILITY_NAMED_IAM | jq -r '.StackId'",
                        returnStdout: true
                    ).trim()

                    println "stackId = ${stackId}"

                    waitUntil(initialRecurrencePeriod: 15000) {
                        echo "Waiting for CloudFormation stack to get ready..."
                        def stackStatus = sh(
                            script: "aws cloudformation list-stacks | jq -r '.StackSummaries[] | select(.StackId == \"${stackId}\").StackStatus'",
                            returnStdout: true
                        ).trim()

                        switch(stackStatus) {
                            case "CREATE_COMPLETE":
                                println "CF Stack ready"
                                return true
                            case "ROLLBACK_COMPLETE":
                                error("Failed to create CloudFormation stack - check AWS console")
                            default:
                                println "'$CFStackName' CF stack not ready yet"
                                return false
                        }
                    }
                }
                
            }
        }

        stage ('INFR - config kubectl') {
            when { expression { DeployTools == 'true' || useEnhancements || DeployApp == 'true' || RunMeasurement == 'true' } }
            steps {
                echo "Configuring kubectl"
                script {
                    sh """
                    |kubectl version --client
                    |aws eks update-kubeconfig --name $EKSClusterName
                    |kubectl get ns
                    """.stripMargin('|')
                }
            }
        }

        stage ('INFR - update helm repos') {
            when { expression { DeployTools == 'true' } }

            steps {
                echo "Add helm repos"
                script {
                    sh """
                    |helm version
                    |helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
                    |helm repo add grafana https://grafana.github.io/helm-charts
                    |helm repo add chaos-mesh https://charts.chaos-mesh.org
                    |helm repo update
                    """.stripMargin('|')
                }
            }
        }

        stage('INFR - create namespaces') {
            when {
                anyOf {
                    expression { DeployTools == 'true' }
                    expression { useEnhancements }
                    expression { DeployApp == 'true' }
                }
            }
            steps {
                echo "Create namespaces"
                sh """
                |kubectl apply -f k8s-deployment/000-namespaces.yaml
                """.stripMargin('|')
            }
        }

        stage ('INFR - deploy tools') {
            when { expression { DeployTools == 'true' } }
            steps {
                echo "Create ConfigMap for Grafana dashboard"
                script {
                    sh """
                    |kubectl -n monitoring delete configmap dashboard-cm || true
                    |kubectl -n monitoring create configmap dashboard-cm --from-file=helm/grafana/dashboard.json
                    """.stripMargin('|')
                }


                echo "Deploy Prometheus, Prometheus Blackbox Exporter, Prometheus Adapter, Grafana, Chaos Mesh"
                script {
                    sh """
                    |helm upgrade --install prometheus prometheus-community/prometheus -n monitoring -f helm/prometheus/values.yaml
                    |helm upgrade --install prometheus-blackbox-exporter prometheus-community/prometheus-blackbox-exporter -n monitoring -f helm/blackbox-exporter/values.yaml
                    |helm upgrade --install prometheus-adapter prometheus-community/prometheus-adapter -n monitoring -f helm/prometheus-adapter/values.yaml
                    |helm upgrade --install grafana grafana/grafana -n monitoring -f helm/grafana/values.yaml
                    |echo "Grafana secret is:"
                    |kubectl get secret --namespace monitoring grafana -o jsonpath="{.data.admin-password}" | base64 --decode ; echo
                    |helm upgrade --install chaos-mesh chaos-mesh/chaos-mesh --namespace=chaos-testing -f helm/chaos-mesh/values.yaml --version v2.0.2
                    |helm upgrade --install kafka-exporter ./helm/kafka-exporter -n monitoring
                    """.stripMargin('|')
                }
            }
        }

        stage('ENHNC - set up') {
            when {
                expression { useEnhancements }
            }
            steps {
                echo "Set up enhancements"
                script {
                    if (UseKafka == 'true') {
                        echo "Build custom Kafka image with JMX Prometheus exporter"
                        dir('kafka') {
                            sh "docker build -t ${REGISTRY_PREFIX}/${KAFKA_DOCKER_IMAGE_NAME}:${DOCKER_TAG} ."
                            sh "docker --config $WORKSPACE/.docker push ${REGISTRY_PREFIX}/${KAFKA_DOCKER_IMAGE_NAME}:${DOCKER_TAG}"
                            sh "docker rmi ${REGISTRY_PREFIX}/${KAFKA_DOCKER_IMAGE_NAME}:${DOCKER_TAG}"
                        }


                        echo "Deploy Kafka"
                        sh "helm upgrade --install kafka ./helm/kafka -n kafka \
                            --set kafka.image.repository=${REGISTRY_PREFIX}/${KAFKA_DOCKER_IMAGE_NAME}:${DOCKER_TAG}"
                    }
                }
            }
        }
        
        stage('APP - build') {
            when { expression { DeployApp == 'true' } }
            steps {
                echo "Build and push backend"
                dir('backend') {
                    sh "./gradlew bootBuildImage --imageName=${REGISTRY_PREFIX}/${BACKEND_DOCKER_IMAGE_NAME}:${DOCKER_TAG}"
                    sh "docker --config $WORKSPACE/.docker push ${REGISTRY_PREFIX}/${BACKEND_DOCKER_IMAGE_NAME}:${DOCKER_TAG}"
                    sh "docker rmi ${REGISTRY_PREFIX}/${BACKEND_DOCKER_IMAGE_NAME}:${DOCKER_TAG}"
                }

                echo "Build and push worker"
                dir('worker') {
                    sh "./gradlew bootBuildImage --imageName=${REGISTRY_PREFIX}/${WORKER_DOCKER_IMAGE_NAME}:${DOCKER_TAG}"
                    sh "docker --config $WORKSPACE/.docker push ${REGISTRY_PREFIX}/${WORKER_DOCKER_IMAGE_NAME}:${DOCKER_TAG}"
                    sh "docker rmi ${REGISTRY_PREFIX}/${WORKER_DOCKER_IMAGE_NAME}:${DOCKER_TAG}"
                }

            }
        }

        stage('APP - deploy') {
            when { expression { DeployApp == 'true' } }
            steps {
                echo "Deploy application"
                script {
                    sh "helm upgrade --install kubedepend ./helm/kubedepend -n kubedepend \
                       --set backend.image.repository=${REGISTRY_PREFIX}/${BACKEND_DOCKER_IMAGE_NAME} \
                       --set backend.image.tag=${DOCKER_TAG} \
                       --set worker.image.repository=${REGISTRY_PREFIX}/${WORKER_DOCKER_IMAGE_NAME} \
                       --set worker.image.tag=${DOCKER_TAG} \
                       --set messaging=${UseKafka == 'true' ? 'kafka' : 'activemq'}"
                    sh "kubectl apply -f k8s-deployment/measurement-proxy.yaml"
                }
            }
        }

        stage('MEAS - config') {
            when { expression { RunMeasurement == 'true' } }
            steps {
                echo "Install dependencies for kubedepend"
                dir('kubedepend') {
                    sh """
                    |pipenv install
                    """.stripMargin('|')
                }
            }
        }

        stage('MEAS - Running tests') {
            when { expression { RunMeasurement == 'true' } }
            steps {
                dir('kubedepend/kubedepend') {
                    sh """
                    |echo "Opening ports..."
                    |kubectl -n monitoring port-forward service/prometheus-server 9090:80 &
                    |PROM_PORT_FW_PID=\$!
                    |kubectl -n measurement-proxy port-forward service/measurement-proxy 8000:80 &
                    |MEAS_PROXY_PORT_FW_PID=\$!
                    |echo "Running tests"
                    |pipenv run python kubedepend.py --fault-profile=$MEASFaultProfile --measurement-count=$MEASMeasurementCount --load-duration=$MEASLoadDuration --cluster-type=$MEASClusterType --locust_user_count=$MEASLocustUserCount --locust_spawn_rate=$MEASLocustSpawnRate --comment=\"$MEASComment\"
                    """.stripMargin('|')
                }
            }
        }

        stage('MEAS - Save test results') {
            when { expression { RunMeasurement == 'true' } }
            steps {
                dir('kubedepend/kubedepend/results') {
                    archiveArtifacts artifacts: '*'
                }
            }
        }

        stage('CLEAN - ENHNC') {
            when {
                expression { CleanEnhancements == 'true' }
            }
            steps {
                echo "Clean enhancements"
            }
        }

        stage('CLEAN - INFR') {
            when { expression { DeleteCFStack == 'true' } }
            
            steps {
                echo "Clean up CloudFormation stack"
                sh """
                |aws cloudformation delete-stack --stack-name $CFStackName
                """.stripMargin('|')
            }
        }

        stage('CLEAN - WS') {
            when { expression { CleanWorkSpace == 'true' } }

            steps {
                cleanWs()
            }
        }
    }
}